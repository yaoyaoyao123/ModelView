#version 330 core

uniform vec3 lightPos;
uniform vec3 viewPos;

in vec3 Normal;
smooth in vec3 FragPos;
out vec4 fragColor;
in vec2 texCoord;
uniform vec4 color;

uniform int model_or_ab = 0;
uniform int nonemtl = 1;

uniform int value_or_diffmap = 0;
uniform int value_or_specmap =  0;

uniform vec3 Kd = vec3(1.0,1.0,1.0);
uniform vec3 Ks = vec3(1.0,1.0,1.0);

uniform sampler2D diff_tex;
uniform sampler2D spec_tex;

void main(void)
{

	float ambientStrength = 0.5;
	vec3 ambient = ambientStrength * vec3(1.0,1.0,1.0);

	vec3 norm = normalize(Normal);
	vec3 lightDir= normalize(lightPos - FragPos);
	float diff = max(dot(norm,lightDir),0.0);
	vec3 diffuse = diff *vec3(1.0,1.0,1.0);

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir,norm);
	float spec = pow(max(dot(viewDir,reflectDir),0.0),32);
	vec3 specular = spec *vec3(0.3,0.3,0.3);

	if(model_or_ab == 0)
	{
		vec3 result;
		if(nonemtl == 0)
		{
			if(value_or_diffmap == 1 && value_or_specmap == 1)
			{
				result = (diffuse + ambient) *texture(diff_tex, texCoord).rgb + specular*texture(spec_tex, texCoord).rgb;
			}
			else if(value_or_diffmap == 1 && value_or_specmap == 0)
			{
				result = (diffuse + ambient) *texture(diff_tex, texCoord).rgb + specular*Ks;
			}
			else if(value_or_diffmap == 0 && value_or_specmap == 1)
			{
				result = (diffuse + ambient) *Kd + specular *specular *texture(spec_tex, texCoord).rgb;
			}
			else
			{
				result = (diffuse + ambient) *Kd + specular*Ks;
			}
		}

		if(nonemtl == 1)
		{
			result = (diffuse + ambient) *Kd;
		}
		
		fragColor = vec4(result, 1.0);
	
	}

	if(model_or_ab == 1)
	{
		fragColor = color;
	}

}
